# Kamailio SIP Server Configuration
# Basic SIP proxy configuration for ARM64 compatibility

####### Global Parameters #########
debug=2
log_stderror=no
log_facility=LOG_LOCAL0

/* number of children processes */
children=4

/* uncomment the next line to disable the tcp functionality */
# disable_tcp=yes

/* uncomment the next line to disable the tls functionality */
# disable_tls=yes

/* uncomment the next line to disable the auto discovery of local aliases
 * based on reverse dns lookups */
# auto_aliases=no

/* add local domain aliases */
alias="localhost"

/* listen addresses */
listen=udp:0.0.0.0:5060
listen=tcp:0.0.0.0:5060

/* uncomment and configure the following line if you want kamailio to
 * bind on a specific interface/port/transport
 */
# listen=udp:10.0.0.10:5060

/* port to listen on */
# port=5060

/* drop privileges */
# user="kamailio"
# group="kamailio"

/* chroot to directory */
# chroot="/var/run/kamailio"

/* daemonize */
# daemon=yes

/* pid file */
# pid_file="/var/run/kamailio/kamailio.pid"

/* log file */
# log_file="/var/log/kamailio/kamailio.log"

/* log prefix */
log_prefix="{$mt $hdr(CSeq) $ci} "

/* disable memory debugging */
# memdbg=5

/* uncomment if you want to log all memory allocations/frees */
# memlog=0

/* uncomment to enable the auto-scaling of the number of children processes
 * according to the load */
# auto_scaling=yes

/* check the mempool size */
# mempool_size=2048

####### Modules Section ########
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "mi_fifo.so"
loadmodule "uri_db.so"
loadmodule "auth.so"
loadmodule "auth_db.so"
loadmodule "group.so"
loadmodule "signaling.so"

####### Routing Logic ########

/* Main SIP request routing logic
 * - processing of any incoming SIP request starts with this route
 * - note: this is the same as route { } - the default route
 */
request_route {
    /* initial sanity checks -- optional but recommended */
    if (is_method("OPTIONS") && uri==myself) {
        sl_send_reply("200", "Keepalive");
        exit;
    }
    
    if (!is_method("REGISTER")) {
        if (!lookup("location")) {
            sl_send_reply("404", "Not Found");
            exit;
        }
    }
    
    /* record routing for subsequent requests */
    if (loose_route()) {
        route(RELAY);
        exit;
    }
    
    /* handle requests */
    if (is_method("REGISTER")) {
        route(REGISTER);
        exit;
    }
    
    if (is_method("INVITE")) {
        route(INVITE);
        exit;
    }
    
    if (is_method("ACK")) {
        route(RELAY);
        exit;
    }
    
    if (is_method("BYE")) {
        route(RELAY);
        exit;
    }
    
    if (is_method("CANCEL")) {
        route(RELAY);
        exit;
    }
    
    /* forward other requests */
    route(RELAY);
}

route[REGISTER] {
    if (!save("location")) {
        sl_reply_error("500", "Internal Error");
        exit;
    }
    sl_send_reply("200", "OK");
}

route[INVITE] {
    if (!lookup("location")) {
        sl_send_reply("404", "Not Found");
        exit;
    }
    route(RELAY);
}

route[RELAY] {
    if (!t_relay()) {
        sl_reply_error("500", "Internal Error");
    }
} 